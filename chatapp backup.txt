import React, { useState, useEffect } from 'react';
import { io, Socket } from 'socket.io-client';
import UsersList from './UsersList';
import MessageList from './MessageList';
import MessageInput from './MessageInput';
import LoginForm from './LoginForm';
import Settings from './Settings';
import RoomsList from './RoomsList';
import { Settings as SettingsIcon } from 'lucide-react';

// Define message interface
export interface Message {
    id: string;
    user: string;
    userId: string;
    text: string;
    timestamp: string;
}

// Define user interface
export interface User {
    id: string;
    username: string;
    description?: string;
}

// Define typing user interface
export interface TypingUser {
    userId: string;
    username: string;
    isTyping: boolean;
    roomId: string;
}

// Define chat room interface
export interface ChatRoom {
    id: string;
    name: string;
    participants: string[];
    isGroup: boolean;
    messages: Message[];
}

const ChatApp: React.FC = () => {
    const [socket, setSocket] = useState<Socket | null>(null);
    const [messages, setMessages] = useState<{ [key: string]: Message[] }>({});
    const [users, setUsers] = useState<User[]>([]);
    const [typingUsers, setTypingUsers] = useState<TypingUser[]>([]);
    const [username, setUsername] = useState<string>(() => localStorage.getItem('username') || '');
    const [description, setDescription] = useState<string>('');
    const [isLoggedIn, setIsLoggedIn] = useState<boolean>(() => Boolean(localStorage.getItem('username')));
    const [connectionStatus, setConnectionStatus] = useState<string>('disconnected');
    const [isDarkMode, setIsDarkMode] = useState<boolean>(() => localStorage.getItem('theme') === 'dark');
    const [isSettingsOpen, setIsSettingsOpen] = useState<boolean>(false);
    const [chatRooms, setChatRooms] = useState<ChatRoom[]>([]);
    const [currentRoom, setCurrentRoom] = useState<string>('');

    // Initialize socket connection
    useEffect(() => {
        const newSocket = io('http://localhost:3000');
        setSocket(newSocket);

        newSocket.on('connect', () => {
            setConnectionStatus('connected');
            console.log('Connected to server');

            // Auto-join if username exists in localStorage
            const savedUsername = localStorage.getItem('username');
            if (savedUsername) {
                newSocket.emit('join', savedUsername);
                setIsLoggedIn(true);
            }
        });

        newSocket.on('disconnect', () => {
            setConnectionStatus('disconnected');
            console.log('Disconnected from server');
        });

        return () => {
            newSocket.disconnect();
        };
    }, []);

    // Set up event listeners after socket is initialized
    useEffect(() => {
        if (!socket) return;

        socket.on('message', ({ roomId, message }: { roomId: string, message: Message }) => {
            setMessages(prev => ({
                ...prev,
                [roomId]: [...(prev[roomId] || []), message]
            }));
        });

        socket.on('userJoined', (user: User) => {
            setUsers(prevUsers => {
                if (!prevUsers.some(u => u.id === user.id)) {
                    return [...prevUsers, user];
                }
                return prevUsers;
            });
        });

        socket.on('userLeft', (user: User) => {
            setUsers(prevUsers => prevUsers.filter(u => u.id !== user.id));
            setTypingUsers(prevTyping => prevTyping.filter(u => u.userId !== user.id));
        });

        socket.on('usersList', (usersList: User[]) => {
            setUsers(usersList);
        });

        socket.on('chatRooms', (rooms: ChatRoom[]) => {
            setChatRooms(rooms);
            if (rooms.length > 0 && !currentRoom) {
                setCurrentRoom(rooms[0].id);
            }
        });

        socket.on('roomCreated', (room: ChatRoom) => {
            setChatRooms(prev => {
                if (!prev.some(r => r.id === room.id)) {
                    return [...prev, room];
                }
                return prev;
            });
            setCurrentRoom(room.id);
            if (room.messages) {
                setMessages(prev => ({
                    ...prev,
                    [room.id]: room.messages
                }));
            }
        });

        socket.on('userTyping', (user: TypingUser) => {
            if (user.isTyping) {
                setTypingUsers(prevTyping => {
                    if (!prevTyping.some(u => u.userId === user.userId && u.roomId === user.roomId)) {
                        return [...prevTyping, user];
                    }
                    return prevTyping;
                });
            } else {
                setTypingUsers(prevTyping =>
                    prevTyping.filter(u => !(u.userId === user.userId && u.roomId === user.roomId))
                );
            }
        });

        socket.on('userUpdated', (updatedUser: User) => {
            setUsers(prevUsers =>
                prevUsers.map(user =>
                    user.id === updatedUser.id ? updatedUser : user
                )
            );
        });

        return () => {
            socket.off('message');
            socket.off('userJoined');
            socket.off('userLeft');
            socket.off('usersList');
            socket.off('chatRooms');
            socket.off('roomCreated');
            socket.off('userTyping');
            socket.off('userUpdated');
        };
    }, [socket, currentRoom]);

    const handleLogin = (name: string) => {
        if (socket && name.trim()) {
            setUsername(name);
            localStorage.setItem('username', name);
            socket.emit('join', name);
            setIsLoggedIn(true);
        }
    };

    const handleUserClick = (userId: string) => {
        if (socket) {
            socket.emit('startPrivateChat', userId);
        }
    };

    const sendMessage = (text: string) => {
        if (socket && text.trim() && currentRoom) {
            socket.emit('message', { roomId: currentRoom, text });
        }
    };

    const handleTyping = (isTyping: boolean) => {
        if (socket && currentRoom) {
            socket.emit('typing', { roomId: currentRoom, isTyping });
        }
    };

    const createRoom = (name: string, participants: string[]) => {
        if (socket) {
            socket.emit('createRoom', { name, participants });
        }
    };

    const updateUserSettings = (newUsername: string, newDescription: string) => {
        if (socket && newUsername.trim()) {
            setUsername(newUsername);
            localStorage.setItem('username', newUsername);
            setDescription(newDescription);
            socket.emit('updateUser', {
                username: newUsername,
                description: newDescription
            });
            setIsSettingsOpen(false);
        }
    };

    const toggleTheme = () => {
        const newTheme = !isDarkMode;
        setIsDarkMode(newTheme);
        localStorage.setItem('theme', newTheme ? 'dark' : 'light');
    };

    const getCurrentUser = () => {
        const otherUserId = currentRoom?.split('_')[1];
        return users.find(u => u.id === otherUserId);
    };

    return (
        <div className={`min-h-screen ${isDarkMode ? 'bg-[#111B21]' : 'bg-white'}`}>
            <div className="h-screen flex">
                {!isLoggedIn ? (
                    <div className="flex-grow flex items-center justify-center">
                        <LoginForm onLogin={handleLogin} isDarkMode={isDarkMode} />
                    </div>
                ) : (
                    <>
                        <aside className={`w-[400px] flex flex-col ${isDarkMode ? 'bg-[#202C33] text-white' : 'bg-gray-100 text-gray-900'}`}>
                            <div className={`p-4 h-16 flex items-center justify-between ${isDarkMode ? 'bg-[#202C33]' : 'bg-emerald-800'}`}>
                                <h1 className="text-xl font-bold text-white">Whastapp</h1>
                                <button
                                    onClick={() => setIsSettingsOpen(true)}
                                    className="text-white hover:bg-[#374045] p-2 rounded-full"
                                >
                                    <SettingsIcon size={20} />
                                </button>
                            </div>
                            <div className="flex-grow overflow-y-auto">
                                <UsersList
                                    users={users}
                                    currentUserId={socket?.id || ''}
                                    isDarkMode={isDarkMode}
                                    onSettingsClick={() => setIsSettingsOpen(true)}
                                    onUserClick={handleUserClick}
                                />
                                <RoomsList
                                    rooms={chatRooms}
                                    currentRoom={currentRoom}
                                    currentUserId={socket?.id || ''}
                                    users={users}
                                    isDarkMode={isDarkMode}
                                    onRoomSelect={setCurrentRoom}
                                    onCreateRoom={createRoom}
                                />
                            </div>
                        </aside>

                        <main className={`flex-grow flex flex-col ${isDarkMode ? 'bg-[#0B141A]' : 'bg-[#efeae2]'}`}>
                            {currentRoom ? (
                                <>
                                    <div className={`p-4 h-16 flex items-center gap-3 ${isDarkMode ? 'bg-[#202C33]' : 'bg-emerald-800'}`}>
                                        <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
                                            {getCurrentUser()?.username.charAt(0).toUpperCase()}
                                        </div>
                                        <div className="text-white">
                                            <div className="font-medium">
                                                {getCurrentUser()?.username}
                                            </div>
                                            <div className="text-sm opacity-80">online</div>
                                        </div>
                                    </div>
                                    <div className="flex-grow overflow-y-auto p-4">
                                        <MessageList
                                            messages={messages[currentRoom] || []}
                                            currentUserId={socket?.id || ''}
                                            isDarkMode={isDarkMode}
                                        />
                                    </div>
                                    <div className={`p-4 ${isDarkMode ? 'bg-[#202C33]' : 'bg-gray-100'}`}>
                                        <MessageInput
                                            onSendMessage={sendMessage}
                                            onTyping={handleTyping}
                                            typingUsers={typingUsers.filter(u => u.userId !== socket?.id && u.roomId === currentRoom)}
                                            isDarkMode={isDarkMode}
                                        />
                                    </div>
                                </>
                            ) : (
                                <div className="flex-grow flex items-center justify-center text-gray-500">
                                    Select a chat to start messaging
                                </div>
                            )}
                        </main>
                    </>
                )}

                {isSettingsOpen && (
                    <Settings
                        username={username}
                        description={description}
                        isDarkMode={isDarkMode}
                        onClose={() => setIsSettingsOpen(false)}
                        onSave={updateUserSettings}
                        onToggleTheme={toggleTheme}
                    />
                )}
            </div>
        </div>
    );
};

export default ChatApp;